{"version":3,"sources":["<no source>","%3Cinput%20css%20j0tTL7%3E","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/utility/icons/icons-communication/main.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/selector/tool/_pseudo.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/display/tool/_mask-image.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/icon/tool/_default.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/selector/tool/_breakpoint.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/_media-query-order.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/legacy/style/tool/_legacy.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/icon/tool/_legacy.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACKhB;;cAAA;ACWE;;ECVA,uECsCM;EDrCN,+DCqCM;AJzBR;;AEHE;;ECVA,uECsCM;EDrCN,+DCqCM;AJpBR;;AERE;;ECVA,uECsCM;EDrCN,+DCqCM;AJfR;;AEbE;;ECVA,uECsCM;EDrCN,+DCqCM;AJVR;;AElBE;;ECVA,2ECsCM;EDrCN,mECqCM;AJLR;;AEvBE;;ECVA,2ECsCM;EDrCN,mECqCM;AJAR;;AE5BE;;ECVA,4ECsCM;EDrCN,oECqCM;AJKR;;AEjCE;;ECVA,4ECsCM;EDrCN,oECqCM;AJUR;;AEtCE;;ECVA,0ECsCM;EDrCN,kECqCM;AJeR;;AE3CE;;ECVA,0ECsCM;EDrCN,kECqCM;AJoBR;;AEhDE;;ECVA,wECsCM;EDrCN,gECqCM;AJyBR;;AErDE;;ECVA,wECsCM;EDrCN,gECqCM;AJ8BR;;AE1DE;;ECVA,yECsCM;EDrCN,iECqCM;AJmCR;;AE/DE;;ECVA,yECsCM;EDrCN,iECqCM;AJwCR;;AEpEE;;ECVA,0ECsCM;EDrCN,kECqCM;AJ6CR;;AEzEE;;ECVA,0ECsCM;EDrCN,kECqCM;AJkDR;;AE9EE;;ECVA,gFCsCM;EDrCN,wECqCM;AJuDR;;AEnFE;;ECVA,gFCsCM;EDrCN,wECqCM;AJ4DR;;AExFE;;ECVA,8ECsCM;EDrCN,sECqCM;AJiER;;AE7FE;;ECVA,8ECsCM;EDrCN,sECqCM;AJsER;;AElGE;;ECVA,2ECsCM;EDrCN,mECqCM;AJ2ER;;AEvGE;;ECVA,2ECsCM;EDrCN,mECqCM;AJgFR;;AK1GI;ECPE,cAAA;;EAAA,cAAA;ANLN;;AKYI;ECPE,cAAA;;EAAA,cAAA;ANFN;;AKSI;ECPE,cAAA;;EAAA,cAAA;ANCN;;AKMI;ECPE,cAAA;;EAAA,cAAA;ANIN;;AODI;ELEF;;IMAE,qEAFI;ER+HN;;EE7HA;;IMAE,qEAFI;ERmIN;;EEjIA;;IMAE,qEAFI;ERuIN;;EErIA;;IMAE,qEAFI;ER2IN;;EEzIA;;IMAE,yEAFI;ER+IN;;EE7IA;;IMAE,yEAFI;ERmJN;;EEjJA;;IMAE,0EAFI;ERuJN;;EErJA;;IMAE,0EAFI;ER2JN;;EEzJA;;IMAE,wEAFI;ER+JN;;EE7JA;;IMAE,wEAFI;ERmKN;;EEjKA;;IMAE,sEAFI;ERuKN;;EErKA;;IMAE,sEAFI;ER2KN;;EEzKA;;IMAE,uEAFI;ER+KN;;EE7KA;;IMAE,uEAFI;ERmLN;;EEjLA;;IMAE,wEAFI;ERuLN;;EErLA;;IMAE,wEAFI;ER2LN;;EEzLA;;IMAE,8EAFI;ER+LN;;EE7LA;;IMAE,8EAFI;ERmMN;;EEjMA;;IMAE,4EAFI;ERuMN;;EErMA;;IMAE,4EAFI;ER2MN;;EEzMA;;IMAE,yEAFI;ER+MN;;EE7MA;;IMAE,yEAFI;ERmNN;AACF","file":"icons-communication.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  ICON COMMUNICATION\n\\* ˍˍˍˍˍˍˍˍˍ */\n@media (min-width: 36em) {\n  /*! media sm */\n}\n@media (min-width: 48em) {\n  /*! media md */\n}\n@media (min-width: 62em) {\n  /*! media lg */\n}\n@media (min-width: 78em) {\n  /*! media xl */\n}\n.fr-icon-chat-2-fill::before, .fr-icon-chat-2-fill::after {\n  -webkit-mask-image: url(\"../../../icons/communication/chat-2-fill.svg\");\n  mask-image: url(\"../../../icons/communication/chat-2-fill.svg\");\n}\n\n.fr-icon-chat-2-line::before, .fr-icon-chat-2-line::after {\n  -webkit-mask-image: url(\"../../../icons/communication/chat-2-line.svg\");\n  mask-image: url(\"../../../icons/communication/chat-2-line.svg\");\n}\n\n.fr-icon-chat-3-fill::before, .fr-icon-chat-3-fill::after {\n  -webkit-mask-image: url(\"../../../icons/communication/chat-3-fill.svg\");\n  mask-image: url(\"../../../icons/communication/chat-3-fill.svg\");\n}\n\n.fr-icon-chat-3-line::before, .fr-icon-chat-3-line::after {\n  -webkit-mask-image: url(\"../../../icons/communication/chat-3-line.svg\");\n  mask-image: url(\"../../../icons/communication/chat-3-line.svg\");\n}\n\n.fr-icon-chat-check-fill::before, .fr-icon-chat-check-fill::after {\n  -webkit-mask-image: url(\"../../../icons/communication/chat-check-fill.svg\");\n  mask-image: url(\"../../../icons/communication/chat-check-fill.svg\");\n}\n\n.fr-icon-chat-check-line::before, .fr-icon-chat-check-line::after {\n  -webkit-mask-image: url(\"../../../icons/communication/chat-check-line.svg\");\n  mask-image: url(\"../../../icons/communication/chat-check-line.svg\");\n}\n\n.fr-icon-chat-delete-fill::before, .fr-icon-chat-delete-fill::after {\n  -webkit-mask-image: url(\"../../../icons/communication/chat-delete-fill.svg\");\n  mask-image: url(\"../../../icons/communication/chat-delete-fill.svg\");\n}\n\n.fr-icon-chat-delete-line::before, .fr-icon-chat-delete-line::after {\n  -webkit-mask-image: url(\"../../../icons/communication/chat-delete-line.svg\");\n  mask-image: url(\"../../../icons/communication/chat-delete-line.svg\");\n}\n\n.fr-icon-chat-poll-fill::before, .fr-icon-chat-poll-fill::after {\n  -webkit-mask-image: url(\"../../../icons/communication/chat-poll-fill.svg\");\n  mask-image: url(\"../../../icons/communication/chat-poll-fill.svg\");\n}\n\n.fr-icon-chat-poll-line::before, .fr-icon-chat-poll-line::after {\n  -webkit-mask-image: url(\"../../../icons/communication/chat-poll-line.svg\");\n  mask-image: url(\"../../../icons/communication/chat-poll-line.svg\");\n}\n\n.fr-icon-discuss-fill::before, .fr-icon-discuss-fill::after {\n  -webkit-mask-image: url(\"../../../icons/communication/discuss-fill.svg\");\n  mask-image: url(\"../../../icons/communication/discuss-fill.svg\");\n}\n\n.fr-icon-discuss-line::before, .fr-icon-discuss-line::after {\n  -webkit-mask-image: url(\"../../../icons/communication/discuss-line.svg\");\n  mask-image: url(\"../../../icons/communication/discuss-line.svg\");\n}\n\n.fr-icon-feedback-fill::before, .fr-icon-feedback-fill::after {\n  -webkit-mask-image: url(\"../../../icons/communication/feedback-fill.svg\");\n  mask-image: url(\"../../../icons/communication/feedback-fill.svg\");\n}\n\n.fr-icon-feedback-line::before, .fr-icon-feedback-line::after {\n  -webkit-mask-image: url(\"../../../icons/communication/feedback-line.svg\");\n  mask-image: url(\"../../../icons/communication/feedback-line.svg\");\n}\n\n.fr-icon-message-2-fill::before, .fr-icon-message-2-fill::after {\n  -webkit-mask-image: url(\"../../../icons/communication/message-2-fill.svg\");\n  mask-image: url(\"../../../icons/communication/message-2-fill.svg\");\n}\n\n.fr-icon-message-2-line::before, .fr-icon-message-2-line::after {\n  -webkit-mask-image: url(\"../../../icons/communication/message-2-line.svg\");\n  mask-image: url(\"../../../icons/communication/message-2-line.svg\");\n}\n\n.fr-icon-question-answer-fill::before, .fr-icon-question-answer-fill::after {\n  -webkit-mask-image: url(\"../../../icons/communication/question-answer-fill.svg\");\n  mask-image: url(\"../../../icons/communication/question-answer-fill.svg\");\n}\n\n.fr-icon-question-answer-line::before, .fr-icon-question-answer-line::after {\n  -webkit-mask-image: url(\"../../../icons/communication/question-answer-line.svg\");\n  mask-image: url(\"../../../icons/communication/question-answer-line.svg\");\n}\n\n.fr-icon-questionnaire-fill::before, .fr-icon-questionnaire-fill::after {\n  -webkit-mask-image: url(\"../../../icons/communication/questionnaire-fill.svg\");\n  mask-image: url(\"../../../icons/communication/questionnaire-fill.svg\");\n}\n\n.fr-icon-questionnaire-line::before, .fr-icon-questionnaire-line::after {\n  -webkit-mask-image: url(\"../../../icons/communication/questionnaire-line.svg\");\n  mask-image: url(\"../../../icons/communication/questionnaire-line.svg\");\n}\n\n.fr-icon-video-chat-fill::before, .fr-icon-video-chat-fill::after {\n  -webkit-mask-image: url(\"../../../icons/communication/video-chat-fill.svg\");\n  mask-image: url(\"../../../icons/communication/video-chat-fill.svg\");\n}\n\n.fr-icon-video-chat-line::before, .fr-icon-video-chat-line::after {\n  -webkit-mask-image: url(\"../../../icons/communication/video-chat-line.svg\");\n  mask-image: url(\"../../../icons/communication/video-chat-line.svg\");\n}\n\n@media (min-width: 36em) {\n  /*! media sm */\n}\n@media (min-width: 48em) {\n  /*! media md */\n}\n@media (min-width: 62em) {\n  /*! media lg */\n}\n@media (min-width: 78em) {\n  /*! media xl */\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-icon-chat-2-fill::before, .fr-icon-chat-2-fill::after {\n    background-image: url(\"../../../icons/communication/chat-2-fill.svg\");\n  }\n\n  .fr-icon-chat-2-line::before, .fr-icon-chat-2-line::after {\n    background-image: url(\"../../../icons/communication/chat-2-line.svg\");\n  }\n\n  .fr-icon-chat-3-fill::before, .fr-icon-chat-3-fill::after {\n    background-image: url(\"../../../icons/communication/chat-3-fill.svg\");\n  }\n\n  .fr-icon-chat-3-line::before, .fr-icon-chat-3-line::after {\n    background-image: url(\"../../../icons/communication/chat-3-line.svg\");\n  }\n\n  .fr-icon-chat-check-fill::before, .fr-icon-chat-check-fill::after {\n    background-image: url(\"../../../icons/communication/chat-check-fill.svg\");\n  }\n\n  .fr-icon-chat-check-line::before, .fr-icon-chat-check-line::after {\n    background-image: url(\"../../../icons/communication/chat-check-line.svg\");\n  }\n\n  .fr-icon-chat-delete-fill::before, .fr-icon-chat-delete-fill::after {\n    background-image: url(\"../../../icons/communication/chat-delete-fill.svg\");\n  }\n\n  .fr-icon-chat-delete-line::before, .fr-icon-chat-delete-line::after {\n    background-image: url(\"../../../icons/communication/chat-delete-line.svg\");\n  }\n\n  .fr-icon-chat-poll-fill::before, .fr-icon-chat-poll-fill::after {\n    background-image: url(\"../../../icons/communication/chat-poll-fill.svg\");\n  }\n\n  .fr-icon-chat-poll-line::before, .fr-icon-chat-poll-line::after {\n    background-image: url(\"../../../icons/communication/chat-poll-line.svg\");\n  }\n\n  .fr-icon-discuss-fill::before, .fr-icon-discuss-fill::after {\n    background-image: url(\"../../../icons/communication/discuss-fill.svg\");\n  }\n\n  .fr-icon-discuss-line::before, .fr-icon-discuss-line::after {\n    background-image: url(\"../../../icons/communication/discuss-line.svg\");\n  }\n\n  .fr-icon-feedback-fill::before, .fr-icon-feedback-fill::after {\n    background-image: url(\"../../../icons/communication/feedback-fill.svg\");\n  }\n\n  .fr-icon-feedback-line::before, .fr-icon-feedback-line::after {\n    background-image: url(\"../../../icons/communication/feedback-line.svg\");\n  }\n\n  .fr-icon-message-2-fill::before, .fr-icon-message-2-fill::after {\n    background-image: url(\"../../../icons/communication/message-2-fill.svg\");\n  }\n\n  .fr-icon-message-2-line::before, .fr-icon-message-2-line::after {\n    background-image: url(\"../../../icons/communication/message-2-line.svg\");\n  }\n\n  .fr-icon-question-answer-fill::before, .fr-icon-question-answer-fill::after {\n    background-image: url(\"../../../icons/communication/question-answer-fill.svg\");\n  }\n\n  .fr-icon-question-answer-line::before, .fr-icon-question-answer-line::after {\n    background-image: url(\"../../../icons/communication/question-answer-line.svg\");\n  }\n\n  .fr-icon-questionnaire-fill::before, .fr-icon-questionnaire-fill::after {\n    background-image: url(\"../../../icons/communication/questionnaire-fill.svg\");\n  }\n\n  .fr-icon-questionnaire-line::before, .fr-icon-questionnaire-line::after {\n    background-image: url(\"../../../icons/communication/questionnaire-line.svg\");\n  }\n\n  .fr-icon-video-chat-fill::before, .fr-icon-video-chat-fill::after {\n    background-image: url(\"../../../icons/communication/video-chat-fill.svg\");\n  }\n\n  .fr-icon-video-chat-line::before, .fr-icon-video-chat-line::after {\n    background-image: url(\"../../../icons/communication/video-chat-line.svg\");\n  }\n}","////\n/// Icon Communication Main\n/// @group icons-communication\n////\n\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  ICON COMMUNICATION\n\\* ˍˍˍˍˍˍˍˍˍ */\n\n@import '../../../core/style/path/path-3';\n@import '../../../media-query-order';\n@import 'index';\n@import 'style/module';\n\n// deprecated\n@import 'deprecated/style/setting';\n@import 'deprecated/style/module';\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Tool : mask-image\n/// @group core\n////\n\n@mixin mask-image($value) {\n  -webkit-mask-image: $value;\n  mask-image: $value;\n}\n\n@mixin mask-image-size($value) {\n  -webkit-mask-size: $value;\n  mask-size: $value;\n}\n\n@mixin mask-image-position($value) {\n  -webkit-mask-position: $value;\n  mask-position: $value;\n}\n","////\n/// Core Tool : Icon default\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size ['md'] - Icon size from `$icon-size-map` (Default to 'md' = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icon-size(sm);\n///     height: icon-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@function get-icon-url($icon, $important: false) {\n  $config: map-get($icons-config, $icon);\n  $url: url('#{$DIST-PATH}#{map-get($config, path)}');\n  @return important($url, $important);\n}\n\n@function get-icon-pseudo($restrain) {\n  @if $restrain == before or $restrain == after {\n    @return $restrain;\n  }\n  @return before after;\n}\n\n@mixin _icon-pseudo ($restrain: null) {\n  @include _pseudo(get-icon-pseudo($restrain)) {\n    @content;\n  }\n}\n\n@mixin icon-size ($size:md, $restrain: null) {\n  @include _icon-pseudo($restrain) {\n    --icon-size: #{icon-size($size)};\n    @content;\n  }\n}\n\n@mixin icon-image ($icon, $restrain: null, $important: false) {\n  $url: get-icon-url($icon, $important);\n\n  @include _icon-pseudo($restrain) {\n    @include mask-image($url);\n  }\n}\n\n@mixin icon-style($restrain: null) {\n  @include _icon-pseudo($restrain) {\n    flex: 0 0 auto;\n    display: inline-block;\n    vertical-align: calc((0.75em - var(--icon-size)) * 0.5);\n    background-color: currentColor;\n    @include size(var(--icon-size), var(--icon-size));\n    @include mask-image-size(100% 100%);\n    @content;\n  }\n}\n\n@mixin icon-content($is-before: true, $override: false) {\n  $pseudos: before after;\n  @if not $is-before {\n    $pseudos: after before;\n  }\n  @include _pseudo(nth($pseudos, 1), '') {\n    @content;\n  }\n  @if $override {\n    @include _pseudo(nth($pseudos, 2), none);\n  }\n}\n\n@mixin icon($icon: null, $size: md, $restrain: null, $styling: true, $is-before: $restrain != after, $override: false) {\n  @if $styling {\n    @include icon-style($restrain);\n  }\n\n  @if $icon != null {\n    @include icon-image($icon, $restrain);\n  }\n\n  @if $size != null {\n    @include icon-size($size, $restrain);\n  }\n\n  @if $is-before != null {\n    @include icon-content($is-before, $override) {\n      @content;\n    }\n  }\n}\n\n@function filter-icons($category, $config: $icons-config) {\n  $filtered: ();\n  @each $icon, $setting in $config {\n    @if map-get($setting, category) == $category {\n      $filtered: map-merge($filtered, (#{$icon}: $setting));\n    }\n  }\n  @return $filtered;\n}\n\n@mixin generate-icons($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-image($icon);\n    }\n  }\n}\n","////\n/// Core Tool : Selector Breakpoint\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Media query order\n/// Fix temporaire, déclare les média query vides de chaque breakpoints, pour garder le bon ordre au build\n////\n\n@import 'core/style/selector/setting/breakpoint';\n@import 'core/style/selector/tool/breakpoint';\n\n@each $bp, $limits in $breakpoints {\n  @if $bp != xs {\n    @include respond-from($bp) {\n      /*! media #{$bp} */\n    }\n  }\n}\n","////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n","////\n/// Core Tool : Icon legacy\n/// @group core\n////\n\n@mixin icon-size-legacy($size:md, $restrain: null) {\n  @include _icon-pseudo($restrain) {\n    $size: icon-size($size);\n    @include size($size, $size);\n    @content;\n  }\n}\n\n@mixin icon-image-legacy($icon, $restrain: null, $important: false) {\n  $url: get-icon-url($icon, $important);\n  @include _icon-pseudo($restrain) {\n    background-image: $url;\n  }\n}\n\n@mixin icon-style-legacy($restrain: null) {\n  @include _icon-pseudo($restrain) {\n    background-color: transparent;\n    background-size: 100%;\n    background-repeat: no-repeat;\n    @content;\n  }\n}\n\n@mixin icon-legacy($icon: null, $size: md, $restrain: null, $styling: true) {\n  @if $styling {\n    @include icon-style-legacy($restrain);\n  }\n\n  @if $icon != null {\n    @include icon-image-legacy($icon, $restrain);\n  }\n\n  @if $size != null {\n    @include icon-size-legacy($size, $restrain);\n  }\n\n  @include _icon-pseudo($restrain) {\n    @content;\n  }\n}\n\n@mixin generate-icons-legacy($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-image-legacy($icon);\n    }\n  }\n}\n"]}